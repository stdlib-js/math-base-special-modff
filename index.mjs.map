{"version":3,"file":"index.mjs","sources":["../lib/assign.js","../lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnanf from '@stdlib/math-base-assert-is-nanf';\nimport toWord from '@stdlib/number-float32-base-to-word';\nimport fromWord from '@stdlib/number-float32-base-from-word';\nimport f32 from '@stdlib/number-float64-base-to-float32';\nimport PINF from '@stdlib/constants-float32-pinf';\nimport FLOAT32_EXPONENT_BIAS from '@stdlib/constants-float32-exponent-bias';\nimport FLOAT32_NUM_SIGNIFICAND_BITS from '@stdlib/constants-float32-num-significand-bits'; // eslint-disable-line id-length\nimport FLOAT32_HIGH_WORD_EXPONENT_MASK from '@stdlib/constants-float32-exponent-mask'; // eslint-disable-line id-length\nimport FLOAT32_HIGH_WORD_SIGNIFICAND_MASK from '@stdlib/constants-float32-significand-mask'; // eslint-disable-line id-length\n\n\n// VARIABLES //\n\nvar ZERO = f32( 0.0 );\nvar NEG_ONE = f32( -1.0 );\n\n\n// MAIN //\n\n/**\n* Decomposes a single-precision floating-point number into integral and fractional parts, each having the same type and sign as the input value, and assigns results to a provided output array.\n*\n* @private\n* @param {number} x - input value\n* @param {Collection} out - output array\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array index offset\n* @returns {Collection} output array\n*\n* @example\n* var parts = modff( 3.14, [ 0.0, 0.0 ], 1, 0 );\n* // returns [ 3.0, 0.1400001049041748 ]\n*/\nfunction modff( x, out, stride, offset ) {\n\tvar word;\n\tvar exp;\n\tvar i;\n\n\tx = f32( x );\n\n\t// Special cases...\n\tif ( x < 1.0 ) {\n\t\tif ( x < 0.0 ) {\n\t\t\tmodff( -x, out, stride, offset );\n\t\t\tout[ offset ] = f32( out[ offset ] * NEG_ONE );\n\t\t\tout[ offset + stride ] = f32( out[ offset + stride ] * NEG_ONE );\n\t\t\treturn out;\n\t\t}\n\t\tif ( x === 0.0 ) { // [ +-0, +-0 ]\n\t\t\tout[ offset ] = x;\n\t\t\tout[ offset + stride ] = x;\n\t\t\treturn out;\n\t\t}\n\t\tout[ offset ] = ZERO;\n\t\tout[ offset + stride ] = x;\n\t\treturn out;\n\t}\n\tif ( isnanf( x ) ) {\n\t\tout[ offset ] = NaN;\n\t\tout[ offset + stride ] = NaN;\n\t\treturn out;\n\t}\n\tif ( x === PINF ) {\n\t\tout[ offset ] = PINF;\n\t\tout[ offset + stride ] = ZERO;\n\t\treturn out;\n\t}\n\t// Decompose |x|...\n\n\t// Extract the word:\n\tword = toWord( x );\n\n\t// Extract the unbiased exponent:\n\texp = ((word & FLOAT32_HIGH_WORD_EXPONENT_MASK) >> FLOAT32_NUM_SIGNIFICAND_BITS)|0; // asm type annotation\n\texp -= FLOAT32_EXPONENT_BIAS|0; // asm type annotation\n\n\t// Handle smaller values (x < 2**23 = 8388608)...\n\tif ( exp < FLOAT32_NUM_SIGNIFICAND_BITS ) {\n\t\ti = (FLOAT32_HIGH_WORD_SIGNIFICAND_MASK >> exp)|0; // asm type annotation\n\n\t\t// Determine if `x` is integral by checking for significand bits which cannot be exponentiated away...\n\t\tif ( ( word & i ) === 0 ) {\n\t\t\tout[ offset ] = x;\n\t\t\tout[ offset + stride ] = ZERO;\n\t\t\treturn out;\n\t\t}\n\t\t// Turn off all the bits which cannot be exponentiated away:\n\t\tword &= ( ~i );\n\n\t\t// Generate the integral part:\n\t\ti = fromWord( word );\n\n\t\t// The fractional part is whatever is leftover:\n\t\tout[ offset ] = i;\n\t\tout[ offset + stride ] = f32( x - i );\n\t\treturn out;\n\t}\n\t// `x` is integral:\n\tout[ offset ] = x;\n\tout[ offset + stride ] = ZERO;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default modff;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport fcn from './assign.js';\n\n\n// MAIN //\n\n/**\n* Decomposes a single-precision floating-point number into integral and fractional parts, each having the same type and sign as the input value.\n*\n* @param {number} x - input value\n* @returns {Array<number>} output array\n*\n* @example\n* var parts = modff( 3.14 );\n* // returns [ 3.0, 0.1400001049041748 ]\n*\n*/\nfunction modff( x ) {\n\treturn fcn( x, [ 0.0, 0.0 ], 1, 0 );\n}\n\n\n// EXPORTS //\n\nexport default modff;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Decompose a single-precision floating-point number into integral and fractional parts.\n*\n* @module @stdlib/math-base-special-modff\n*\n* @example\n* import modff from '@stdlib/math-base-special-modff';\n*\n* var parts = modff( 3.14 );\n* // returns [ 3.0, 0.1400001049041748 ]\n*\n* @example\n* import Float32Array from '@stdlib/array-float32';\n* import modff from '@stdlib/math-base-special-modff';\n*\n* var out = new Float32Array( 2 );\n*\n* var parts = modff.assign( 3.14, out, 1, 0 );\n* // returns <Float32Array>[ 3.0, 0.1400001049041748 ]\n*\n* var bool = ( parts === out );\n* // returns true\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport assign from './assign.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\n\n\n// EXPORTS //\n\nexport default main;\n"],"names":["ZERO","f32","NEG_ONE","modff","x","out","stride","offset","word","exp","i","isnanf","NaN","PINF","toWord","FLOAT32_HIGH_WORD_EXPONENT_MASK","FLOAT32_NUM_SIGNIFICAND_BITS","FLOAT32_EXPONENT_BIAS","FLOAT32_HIGH_WORD_SIGNIFICAND_MASK","fromWord","fcn","setReadOnly","main","assign"],"mappings":";;8hCAmCA,IAAIA,EAAOC,EAAK,GACZC,EAAUD,GAAM,GAmBpB,SAASE,EAAOC,EAAGC,EAAKC,EAAQC,GAC/B,IAAIC,EACAC,EACAC,EAKJ,OAHAN,EAAIH,EAAKG,IAGA,EACHA,EAAI,GACRD,GAAQC,EAAGC,EAAKC,EAAQC,GACxBF,EAAKE,GAAWN,EAAKI,EAAKE,GAAWL,GACrCG,EAAKE,EAASD,GAAWL,EAAKI,EAAKE,EAASD,GAAWJ,GAChDG,GAEG,IAAND,GACJC,EAAKE,GAAWH,EAChBC,EAAKE,EAASD,GAAWF,EAClBC,IAERA,EAAKE,GAAWP,EAChBK,EAAKE,EAASD,GAAWF,EAClBC,GAEHM,EAAQP,IACZC,EAAKE,GAAWK,IAChBP,EAAKE,EAASD,GAAWM,IAClBP,GAEHD,IAAMS,GACVR,EAAKE,GAAWM,EAChBR,EAAKE,EAASD,GAAWN,EAClBK,IAQRI,IAHAD,EAAOM,EAAQV,IAGAW,IAAoCC,EAA8B,GACjFP,GAA6B,EAAtBQ,GAGID,EAIY,IAAfR,GAHPE,EAAKQ,GAAsCT,EAAK,KAI/CJ,EAAKE,GAAWH,EAChBC,EAAKE,EAASD,GAAWN,EAClBK,IAMRK,EAAIS,EAHJX,IAAWE,GAMXL,EAAKE,GAAWG,EAChBL,EAAKE,EAASD,GAAWL,EAAKG,EAAIM,GAC3BL,IAGRA,EAAKE,GAAWH,EAChBC,EAAKE,EAASD,GAAWN,EAClBK,GACR,CCrFA,SAASF,EAAOC,GACf,OAAOgB,EAAKhB,EAAG,CAAE,EAAK,GAAO,EAAG,EACjC,CCaAiB,EAAAC,EAAA,SAAAC"}
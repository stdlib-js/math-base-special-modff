{
  "version": 3,
  "sources": ["../lib/assign.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnanf = require( '@stdlib/math-base-assert-is-nanf' );\nvar toWord = require( '@stdlib/number-float32-base-to-word' );\nvar fromWord = require( '@stdlib/number-float32-base-from-word' );\nvar f32 = require( '@stdlib/number-float64-base-to-float32' );\nvar PINF = require( '@stdlib/constants-float32-pinf' );\nvar FLOAT32_EXPONENT_BIAS = require( '@stdlib/constants-float32-exponent-bias' );\nvar FLOAT32_HIGH_WORD_EXPONENT_MASK = require( '@stdlib/constants-float32-exponent-mask' ); // eslint-disable-line id-length\nvar FLOAT32_HIGH_WORD_SIGNIFICAND_MASK = require( '@stdlib/constants-float32-significand-mask' ); // eslint-disable-line id-length\n\n\n// VARIABLES //\n\nvar ZERO = f32( 0.0 );\nvar NEG_ONE = f32( -1.0 );\n\n\n// MAIN //\n\n/**\n* Decomposes a single-precision floating-point number into integral and fractional parts, each having the same type and sign as the input value, and assigns results to a provided output array.\n*\n* @private\n* @param {number} x - input value\n* @param {Collection} out - output array\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array index offset\n* @returns {Collection} output array\n*\n* @example\n* var parts = modff( 3.14, [ 0.0, 0.0 ], 1, 0 );\n* // returns [ 3.0, 0.1400001049041748 ]\n*/\nfunction modff( x, out, stride, offset ) {\n\tvar word;\n\tvar exp;\n\tvar i;\n\n\tx = f32( x );\n\n\t// Special cases...\n\tif ( x < 1.0 ) {\n\t\tif ( x < 0.0 ) {\n\t\t\tmodff( -x, out, stride, offset );\n\t\t\tout[ offset ] = f32( out[ offset ] * NEG_ONE );\n\t\t\tout[ offset + stride ] = f32( out[ offset + stride ] * NEG_ONE );\n\t\t\treturn out;\n\t\t}\n\t\tif ( x === 0.0 ) { // [ +-0, +-0 ]\n\t\t\tout[ offset ] = x;\n\t\t\tout[ offset + stride ] = x;\n\t\t\treturn out;\n\t\t}\n\t\tout[ offset ] = ZERO;\n\t\tout[ offset + stride ] = x;\n\t\treturn out;\n\t}\n\tif ( isnanf( x ) ) {\n\t\tout[ offset ] = NaN;\n\t\tout[ offset + stride ] = NaN;\n\t\treturn out;\n\t}\n\tif ( x === PINF ) {\n\t\tout[ offset ] = PINF;\n\t\tout[ offset + stride ] = ZERO;\n\t\treturn out;\n\t}\n\t// Decompose |x|...\n\n\t// Extract the word:\n\tword = toWord( x );\n\n\t// Extract the unbiased exponent:\n\texp = ((word & FLOAT32_HIGH_WORD_EXPONENT_MASK) >> 23)|0; // asm type annotation\n\texp -= FLOAT32_EXPONENT_BIAS|0; // asm type annotation\n\n\t// Handle smaller values (x < 2**23 = 8388608)...\n\tif ( exp < 23 ) {\n\t\ti = (FLOAT32_HIGH_WORD_SIGNIFICAND_MASK >> exp)|0; // asm type annotation\n\n\t\t// Determine if `x` is integral by checking for significand bits which cannot be exponentiated away...\n\t\tif ( ( word & i ) === 0 ) {\n\t\t\tout[ offset ] = x;\n\t\t\tout[ offset + stride ] = ZERO;\n\t\t\treturn out;\n\t\t}\n\t\t// Turn off all the bits which cannot be exponentiated away:\n\t\tword &= ( ~i );\n\n\t\t// Generate the integral part:\n\t\ti = fromWord( word );\n\n\t\t// The fractional part is whatever is leftover:\n\t\tout[ offset ] = i;\n\t\tout[ offset + stride ] = f32( x - i );\n\t\treturn out;\n\t}\n\t// Check if `x` can even have a fractional part...\n\tif ( exp >= 23 ) {\n\t\t// `x` is integral:\n\t\tout[ offset ] = x;\n\t\tout[ offset + stride ] = ZERO;\n\t\treturn out;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = modff;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar fcn = require( './assign.js' );\n\n\n// MAIN //\n\n/**\n* Decomposes a single-precision floating-point number into integral and fractional parts, each having the same type and sign as the input value.\n*\n* @param {number} x - input value\n* @returns {Array<number>} output array\n*\n* @example\n* var parts = modff( 3.14 );\n* // returns [ 3.0, 0.1400001049041748 ]\n*\n*/\nfunction modff( x ) {\n\treturn fcn( x, [ 0.0, 0.0 ], 1, 0 );\n}\n\n\n// EXPORTS //\n\nmodule.exports = modff;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Decompose a single-precision floating-point number into integral and fractional parts.\n*\n* @module @stdlib/math-base-special-modff\n*\n* @example\n* var modff = require( '@stdlib/math-base-special-modff' );\n*\n* var parts = modff( 3.14 );\n* // returns [ 3.0, 0.1400001049041748 ]\n*\n* @example\n* var Float32Array = require( '@stdlib/array-float32' );\n* var modff = require( '@stdlib/math-base-special-modff' );\n*\n* var out = new Float32Array( 2 );\n*\n* var parts = modff.assign( 3.14, out, 1, 0 );\n* // returns <Float32Array>[ 3.0, 0.1400001049041748 ]\n*\n* var bool = ( parts === out );\n* // returns true\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar assign = require( './assign.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAS,QAAS,kCAAmC,EACrDC,EAAS,QAAS,qCAAsC,EACxDC,EAAW,QAAS,uCAAwC,EAC5DC,EAAM,QAAS,wCAAyC,EACxDC,EAAO,QAAS,gCAAiC,EACjDC,EAAwB,QAAS,yCAA0C,EAC3EC,EAAkC,QAAS,yCAA0C,EACrFC,EAAqC,QAAS,4CAA6C,EAK3FC,EAAOL,EAAK,CAAI,EAChBM,EAAUN,EAAK,EAAK,EAmBxB,SAASO,EAAOC,EAAGC,EAAKC,EAAQC,EAAS,CACxC,IAAIC,EACAC,EACAC,EAKJ,GAHAN,EAAIR,EAAKQ,CAAE,EAGNA,EAAI,EACR,OAAKA,EAAI,GACRD,EAAO,CAACC,EAAGC,EAAKC,EAAQC,CAAO,EAC/BF,EAAKE,CAAO,EAAIX,EAAKS,EAAKE,CAAO,EAAIL,CAAQ,EAC7CG,EAAKE,EAASD,CAAO,EAAIV,EAAKS,EAAKE,EAASD,CAAO,EAAIJ,CAAQ,EACxDG,GAEHD,IAAM,GACVC,EAAKE,CAAO,EAAIH,EAChBC,EAAKE,EAASD,CAAO,EAAIF,EAClBC,IAERA,EAAKE,CAAO,EAAIN,EAChBI,EAAKE,EAASD,CAAO,EAAIF,EAClBC,GAER,GAAKZ,EAAQW,CAAE,EACd,OAAAC,EAAKE,CAAO,EAAI,IAChBF,EAAKE,EAASD,CAAO,EAAI,IAClBD,EAER,GAAKD,IAAMP,EACV,OAAAQ,EAAKE,CAAO,EAAIV,EAChBQ,EAAKE,EAASD,CAAO,EAAIL,EAClBI,EAYR,GAPAG,EAAOd,EAAQU,CAAE,EAGjBK,GAAQD,EAAOT,IAAoC,GAAI,EACvDU,GAAOX,EAAsB,EAGxBW,EAAM,GAIV,OAHAC,EAAKV,GAAsCS,EAAK,GAGzCD,EAAOE,KAAQ,GACrBL,EAAKE,CAAO,EAAIH,EAChBC,EAAKE,EAASD,CAAO,EAAIL,EAClBI,IAGRG,GAAU,CAACE,EAGXA,EAAIf,EAAUa,CAAK,EAGnBH,EAAKE,CAAO,EAAIG,EAChBL,EAAKE,EAASD,CAAO,EAAIV,EAAKQ,EAAIM,CAAE,EAC7BL,GAGR,GAAKI,GAAO,GAEX,OAAAJ,EAAKE,CAAO,EAAIH,EAChBC,EAAKE,EAASD,CAAO,EAAIL,EAClBI,CAET,CAKAb,EAAO,QAAUW,IClIjB,IAAAQ,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAM,IAgBV,SAASC,EAAOC,EAAI,CACnB,OAAOF,EAAKE,EAAG,CAAE,EAAK,CAAI,EAAG,EAAG,CAAE,CACnC,CAKAH,EAAO,QAAUE,ICCjB,IAAIE,EAAc,QAAS,uDAAwD,EAC/EC,EAAO,IACPC,EAAS,IAKbF,EAAaC,EAAM,SAAUC,CAAO,EAKpC,OAAO,QAAUD",
  "names": ["require_assign", "__commonJSMin", "exports", "module", "isnanf", "toWord", "fromWord", "f32", "PINF", "FLOAT32_EXPONENT_BIAS", "FLOAT32_HIGH_WORD_EXPONENT_MASK", "FLOAT32_HIGH_WORD_SIGNIFICAND_MASK", "ZERO", "NEG_ONE", "modff", "x", "out", "stride", "offset", "word", "exp", "i", "require_main", "__commonJSMin", "exports", "module", "fcn", "modff", "x", "setReadOnly", "main", "assign"]
}
